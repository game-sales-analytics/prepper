syntax = "proto3";

package coresrv;

import "google/protobuf/timestamp.proto";

option csharp_namespace = "GSA.Rpc";

service CoreService {
  rpc Ping(PingRequest) returns (PingReply);
  rpc BulkStoreGameSales(BulkStoreGameSalesRequest)
      returns (BulkStoreGameSalesReply);
  rpc GetGameSalesByRank(GetGameSalesByRankRequest)
      returns (GetGameSalesByRankReply);
  rpc SearchGameSalesByName(SearchGameSalesByNameRequest)
      returns (SearchGameSalesByNameReply);
  rpc GetTopNGamesOfPlatforms(GetTopNGamesOfPlatformsRequest)
      returns (GetTopNGamesOfPlatformsReply);
  rpc GetTopNGamesOfYear(GetTopNGamesOfYearRequest)
      returns (GetTopNGamesOfYearReply);
  rpc GetTopNGamesOfGenre(GetTopNGamesOfGenreRequest)
      returns (GetTopNGamesOfGenreReply);
  rpc Get5MostSoldGamesByYearAndPlatform(
      Get5MostSoldGamesByYearAndPlatformRequest)
      returns (Get5MostSoldGamesByYearAndPlatformReply);
  rpc GetGameSalesWithMoreSalesInEUThanNA(
      GetGameSalesWithMoreSalesInEUThanNARequest)
      returns (GetGameSalesWithMoreSalesInEUThanNAReply);
  rpc GetGameSalesInIds(GetGameSalesInIdsRequest)
      returns (GetGameSalesInIdsReply);
  rpc GetYearlyTotalGameSalesInRange(GetYearlyTotalGameSalesInRangeRequest)
      returns (GetYearlyTotalGameSalesInRangeReply);
  rpc GetTotalPublishersGameSalesInYearsRange(
      GetTotalPublishersGameSalesInYearsRangeRequest)
      returns (GetTotalPublishersGameSalesInYearsRangeReply);
  rpc GetTotalGameSalesInYearsRangeByGenre(
      GetTotalGameSalesInYearsRangeByGenreRequest)
      returns (GetTotalGameSalesInYearsRangeByGenreReply);
}

message PingRequest {
}

message PingReply {
  bool pong = 1;
}

message GameSale {
  string id = 1;
  google.protobuf.Timestamp registered_at = 2;
  uint64 rank = 3;
  string name = 4;
  string platform = 5;
  uint32 year = 6;
  string genre = 7;
  string publisher = 8;
  float na_sales = 9;
  float eu_sales = 10;
  float jp_sales = 11;
  float other_sales = 12;
  float global_sales = 13;
}

message BulkStoreGameSalesRequest {
  message GameSale {
    uint64 rank = 1;
    string name = 2;
    string platform = 3;
    uint32 year = 4;
    string genre = 5;
    string publisher = 6;
    float na_sales = 7;
    float eu_sales = 8;
    float jp_sales = 9;
    float other_sales = 10;
    float global_sales = 11;
  }

  repeated GameSale items = 1;
}

message BulkStoreGameSalesReply {
  repeated GameSale items = 1;
}

message GetGameSalesByRankRequest {
  uint64 rank = 1;
}

message GetGameSalesByRankReply {
  GameSale game_sale = 1;
}

message SearchGameSalesByNameRequest {
  string name = 1;
}

message SearchGameSalesByNameReply {
  repeated GameSale items = 1;
}

message GetTopNGamesOfPlatformsRequest {
  uint64 n = 1;
}

message GetTopNGamesOfPlatformsReply {
  message GameSales {
    repeated GameSale items = 1;
  }
  map<string, GameSales> group = 1;
}

message GetTopNGamesOfYearRequest {
  uint64 n = 1;
  uint32 year = 2;
}

message GetTopNGamesOfYearReply {
  repeated GameSale items = 1;
}

message GetTopNGamesOfGenreRequest {
  uint64 n = 1;
  string genre = 2;
}

message GetTopNGamesOfGenreReply {
  repeated GameSale items = 1;
}

message Get5MostSoldGamesByYearAndPlatformRequest {
  uint32 year = 1;
  string platform = 2;
}

message Get5MostSoldGamesByYearAndPlatformReply {
  repeated GameSale items = 1;
}

message GetGameSalesWithMoreSalesInEUThanNARequest {
}

message GetGameSalesWithMoreSalesInEUThanNAReply {
  repeated GameSale items = 1;
}

message GetGameSalesInIdsRequest {
  repeated string ids = 1;
}

message GetGameSalesInIdsReply {
  map<string, GameSale> game_sales = 1;
}

message GetYearlyTotalGameSalesInRangeRequest {
  uint32 start_year = 1;
  uint32 end_year = 2;
}

message GetYearlyTotalGameSalesInRangeReply {
  message TotalYearGameSales {
    uint32 year = 1;
    float total_game_sales = 2;
  }
  repeated TotalYearGameSales items = 1;
}

message GetTotalPublishersGameSalesInYearsRangeRequest {
  repeated string publisher_ids = 1;
  uint32 start_year = 2;
  uint32 end_year = 3;
}

message GetTotalPublishersGameSalesInYearsRangeReply {
  message PublisherTotalYearsGameSales {
    message PublisherTotalYearGameSales {
      uint32 year = 1;
      float total_game_sales = 2;
    }
    repeated PublisherTotalYearGameSales items = 1;
  }
  map<string, PublisherTotalYearsGameSales> publisher_sales = 1;
}

message GetTotalGameSalesInYearsRangeByGenreRequest {
  uint32 start_year = 1;
  uint32 end_year = 2;
}

message GetTotalGameSalesInYearsRangeByGenreReply {
  map<string, float> genre_total_sales = 1;
}
